---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import NavList from "../components/NavList.astro";

import { createTree } from "../utils/nav";

interface Props {
	title: string;
}

const { title } = Astro.props;

const blogEntries: CollectionEntry<"root">[] = await getCollection("root");

const tree = createTree(blogEntries);
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="flex h-screen">
		<nav
			class="min-w-60 max-w-80 border-r border-gray-200 resize-x overflow-hidden bg-gray-50"
			role="navigation"
		>
			<NavList tree={tree} />
		</nav>
		<div id="content" class="flex-1 py-3 px-4">
			<slot />
		</div>
	</body>
</html>
<script is:inline>
	history.replaceState(
		{ title: document.head.title, body: document.body.innerHTML },
		null,
		window.location.pathname
	);

	window.onpopstate = (e) => {
		if (e.state) {
			document.head.title = e.state.title;
			document.body.innerHTML = e.state.body;
		}
	};

	const loadContent = async (url) => {
		try {
			const headers = new Headers();
			headers.append("cache-control", "max-age=3600, public");
			const response = await fetch(url, { headers });
			if (!response.ok) {
				throw new Error("Network response was not ok");
			}
			const html = await response.text();
			const parser = new DOMParser();
			const doc = parser.parseFromString(html, "text/html");
			const newContent = doc.querySelector("#content").innerHTML;
			document.getElementById("content").innerHTML = newContent;
			document.head.title = doc.head.title;
			history.pushState(
				{ title: doc.head.title, body: doc.body.innerHTML },
				null,
				url
			);
		} catch (error) {
			console.error("Error fetching the content:", error);
		}
	};

	let selectedElement = document.querySelector("[data-selected=true]");
	document.querySelectorAll("[data-collapsible]").forEach((link) => {
		link.onclick = (e) => {
			e.preventDefault();
			if (selectedElement) {
				if (
					selectedElement.dataset.collapsible === "true" &&
					selectedElement === link
				) {
					const listItem = selectedElement.closest("li");
					if (listItem) {
						const value = listItem.getAttribute("data-collapsed") === "true";
						listItem.setAttribute("data-collapsed", String(!value));
					}
					return;
				}
				selectedElement.dataset.selected = "false";
			}
			link.dataset.selected = "true";
			selectedElement = link;
			loadContent(link.getAttribute("href"));
		};
	});
</script>
