---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";

import { createTree } from "../utils/nav";
import NavList from "../components/NavList.astro";

interface Props {
	title: string;
}

const { title } = Astro.props;

const blogEntries: CollectionEntry<"root">[] = await getCollection("root");

const tree = createTree(blogEntries);
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link
			rel="preload"
			href="/fonts/PlexSerif.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<title>{title}</title>
	</head>
	<body
		class="tracking-[-0.02em] text-black bg-white group flex flex-col h-dvh"
		data-panel="closed"
	>
		<div
			class="relative flex-1 flex overflow-auto group-data-[panel=open]:overflow-hidden"
		>
			<div
				class="fixed sm:sticky inset-x-0 top-0 bottom-12 sm:left-0 sm:bottom-0 sm:right-auto flex sm:flex-col group-data-[panel=closed]:hidden sm:group-data-[panel=closed]:flex"
			>
				<nav
					class="sm:flex-1 relative bg-white border-r border-black overflow-y-auto pl-3 pr-6 py-2 leading-tight"
				>
					<NavList tree={tree} levelToLastChildMap={{}} />
				</nav>
				<div id="nav-shade" class="flex-1 sm:hidden bg-black/10"></div>
			</div>
			<div id="content" class="flex-1 px-4 sm:px-8 py-6 max-w-xl">
				<slot />
			</div>
		</div>
		<div class="sm:hidden px-4 h-12 flex items-center border-t border-black">
			<button
				id="show-navbar"
				class="text-blue underline group-data-[panel=open]:hidden"
				>read more</button
			>
			<button
				id="hide-navbar"
				class="text-blue dark:text-lightblue underline group-data-[panel=closed]:hidden"
				>hide</button
			>
		</div>
	</body>
</html>
<script>
	const togglePanel = (value: boolean) => {
		const panel = document.querySelector("[data-panel]");
		if (panel) {
			panel.setAttribute("data-panel", value ? "open" : "closed");
		}
	};
	const showNavabrButton = document.getElementById("show-navbar");
	if (showNavabrButton) showNavabrButton.onclick = () => togglePanel(true);

	const hideNavbarButton = document.getElementById("hide-navbar");
	if (hideNavbarButton) hideNavbarButton.onclick = () => togglePanel(false);

	const navShade = document.getElementById("nav-shade");
	if (navShade) navShade.onclick = () => togglePanel(false);
</script>
