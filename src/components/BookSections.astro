---
import { readFile } from "fs/promises";

import { createFilenameWithExtension } from "../helper";
import type { Section, Book, PostBookMap } from "../types";

import { PAGE_COUNT_MAP_PATH, SECTIONS_PATH } from "../constants";

const sections: Section[] = JSON.parse(await readFile(SECTIONS_PATH, "utf-8"));
const pageCountMap: PostBookMap = JSON.parse(
  await readFile(PAGE_COUNT_MAP_PATH, "utf-8"),
);

const calculateSectionPages = (books: Book[]): number => {
  return books.reduce((total, book) => {
    const pages =
      pageCountMap[book.book_title as keyof typeof pageCountMap] || 0;
    return total + pages;
  }, 0);
};

const formatPages = (pages: number): string => {
  return pages === 0 ? "Unknown" : `${pages} pages`;
};
---

{
  sections.map((section: Section) => (
    <>
      <h2>
        {`${section.title} (${formatPages(calculateSectionPages(section.books))})`}
      </h2>
      {section.description ? <p>{section.description}</p> : null}
      <div class="grid grid-cols-3 sm:grid-cols-6 gap-4 place-items-center">
        {section.books
          .sort((a, b) => a.book_title.localeCompare(b.book_title))
          .map((book: Book) => (
            <div>
              <div class="flex items-center">
                <img
                  loading="lazy"
                  src={`/images/covers/${createFilenameWithExtension(book.book_title)}`}
                  alt={book.book_title}
                  class="h-40 object-scale-down"
                />
              </div>
              <p class="text-sm mt-3 text-center">
                {formatPages(
                  pageCountMap[book.book_title as keyof typeof pageCountMap] ||
                    0,
                )}
              </p>
            </div>
          ))}
      </div>
    </>
  ))
}
