---
import type { TreeNode } from "../types";

interface Props {
	tree: Record<string, TreeNode>;
	levelToLastChildMap: Record<number, boolean>;
}

const { tree, levelToLastChildMap } = Astro.props;

const pathname = Astro.url.pathname;
const formattedPathname = pathname !== "/" ? pathname.replace(/\/$/, "") : "/";
---

<ul>
	{
		Object.entries(tree).map(([title, node], nodeIndex) => {
			const { path, children, level } = node;

			const isLastChild = nodeIndex === Object.entries(tree).length - 1;

			const localLevelToLastChildMap = {
				...levelToLastChildMap,
				[level]: isLastChild,
			};

			const isSelected = path === formattedPathname;
			return (
				<li>
					<div class="flex">
						{Array.from({ length: level }).map((_, index) => (
							<span class={index === 0 ? "" : "ml-1"}>
								{level - 1 === index
									? isLastChild
										? "└"
										: "├"
									: localLevelToLastChildMap[index + 1]
										? "\u00a0"
										: "│"}
							</span>
						))}
						{isSelected ? (
							<span class={level === 0 ? "" : "ml-1"}>{title}</span>
						) : (
							<a href={path} class={level === 0 ? "" : "ml-1"}>
								{title}
							</a>
						)}
					</div>
					{Object.keys(children).length > 0 && (
						<Astro.self
							tree={children}
							levelToLastChildMap={localLevelToLastChildMap}
						/>
					)}
				</li>
			);
		})
	}
</ul>
