---
import { ChevronDown } from "lucide-astro";

import type { TreeNode } from "../types";

interface Props {
	tree: Record<string, TreeNode>;
}

const { tree } = Astro.props;

const pathname = Astro.url.pathname;
const formattedPathname = pathname !== "/" ? pathname.replace(/\/$/, "") : "/";
---

<ul>
	{
		Object.entries(tree).map(([title, node]) => {
			const { path, children, level } = node;
			const isCollapsible = Object.keys(children).length > 0;
			const isSelected = path === formattedPathname;
			const id = `list-item-${path.replace(/\//g, "-")}`;
			return (
				<li
					id={id}
					data-collapsed="false"
					class="group group-data-[collapsed=true]:hidden"
				>
					<a
						href={path}
						class="group text-sm flex items-center decoration-blue data-[selected=true]:bg-gray data-[selected=true]:underline hover:underline"
						data-collapsible={String(isCollapsible)}
						data-selected={String(isSelected)}
					>
						{Array.from({ length: level }).map(() => (
							<span class="ml-3 self-stretch border-l" />
						))}
						{isCollapsible ? (
							<span class="ml-1 flex items-end">
								<ChevronDown
									size="17px"
									stroke-width="1.5px"
									class="group-data-[collapsed=true]:-rotate-90"
								/>
								<span class="ml-1 text-blue">{title}</span>
							</span>
						) : (
							<span class="ml-3 text-blue">{title}</span>
						)}
					</a>
					{isCollapsible && <Astro.self tree={children} />}
				</li>
			);
		})
	}
</ul>
